{"remainingRequest":"D:\\HBuilderProjects\\DML_OA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\HBuilderProjects\\DML_OA\\src\\pages\\index\\staff\\tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\HBuilderProjects\\DML_OA\\src\\pages\\index\\staff\\tree.vue","mtime":1616492600669},{"path":"D:\\HBuilderProjects\\DML_OA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615258085839},{"path":"D:\\HBuilderProjects\\DML_OA\\node_modules\\babel-loader\\lib\\index.js","mtime":1615258097485},{"path":"D:\\HBuilderProjects\\DML_OA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1615258085839},{"path":"D:\\HBuilderProjects\\DML_OA\\node_modules\\vue-loader\\lib\\index.js","mtime":1615258095774}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport TreeRender from './tree_render'\nimport api from '@/resource/api'\n\n  export default{\n    name: 'tree',\n    data(){\n      return{\n        maxexpandId: api.maxexpandId,//新增节点开始id\n        non_maxexpandId: api.maxexpandId,//新增节点开始id(不更改)\n        isLoadingTree: false,//是否加载节点树\n        setTree: api.treelist,//节点树数据\n        defaultProps: {\n          children: 'children',\n          label: 'name'\n        },\n        defaultExpandKeys: [],//默认展开节点列表\n      }\n    },\n    mounted(){\n      console.log(api)\n      this.initExpand()\n    },\n    methods: {\n      initExpand(){\n        this.setTree.map((a) => {\n          this.defaultExpandKeys.push(a.id)\n        });\n        this.isLoadingTree = true;\n      },\n      handleNodeClick(d,n,s){//点击节点\n        // console.log(d,n)\n        d.isEdit = false;//放弃编辑状态\n      },\n      renderContent(h,{node,data,store}){//加载节点\n        let that = this;\n        return h(TreeRender,{\n          props: {\n            DATA: data,\n            NODE: node,\n            STORE: store,\n            maxexpandId: that.non_maxexpandId\n          },\n          on: {\n            nodeAdd: ((s,d,n) => that.handleAdd(s,d,n)),\n            nodeEdit: ((s,d,n) => that.handleEdit(s,d,n)),\n            nodeDel: ((s,d,n) => that.handleDelete(s,d,n))\n          }\n        });\n      },\n      handleAddTop(){\n        this.setTree.push({\n          id: ++this.maxexpandId,\n          name: '新增节点',\n          pid: '',\n          isEdit: false,\n          children: []\n        })\n      },\n      handleAdd(s,d,n){//增加节点\n        console.log(s,d,n)\n        if(n.level >=3){\n          this.$message.error(\"最多只支持五级！\")\n          return false;\n        }\n        //添加数据\n        d.children.push({\n          id: ++this.maxexpandId,\n          name: '新增节点',\n          pid: d.id,\n          isEdit: false,\n          children: []\n        });\n        //展开节点\n        if(!n.expanded){\n          n.expanded = true;\n        }\n      },\n      handleEdit(s,d,n){//编辑节点\n        console.log(s,d,n)\n      },\n      handleDelete(s,d,n){//删除节点\n        console.log(s,d,n)\n        let that = this;\n        //有子级不删除\n        if(d.children && d.children.length !== 0){\n          this.$message.error(\"此节点有子级，不可删除！\")\n          return false;\n        }else{\n          //新增节点直接删除，否则要询问是否删除\n          let delNode = () => {\n            let list = n.parent.data.children || n.parent.data,//节点同级数据\n              _index = 99999;//要删除的index\n            /*if(!n.parent.data.children){//删除顶级节点，无children\n              list = n.parent.data\n            }*/\n            list.map((c,i) => {\n              if(d.id == c.id){\n                _index = i;\n              }\n            })\n            let k = list.splice(_index,1);\n            //console.log(_index,k)\n            this.$message.success(\"删除成功！\")\n          }\n          let isDel = () => {\n            that.$confirm(\"是否删除此节点？\",\"提示\",{\n              confirmButtonText: \"确认\",\n              cancelButtonText: \"取消\",\n              type: \"warning\"\n            }).then(() => {\n              delNode()\n            }).catch(() => {\n              return false;\n            })\n          }\n          //判断是否新增\n          d.id > this.non_maxexpandId ? delNode() : isDel()\n          \n        }\n      },\n    }\n    \n  }\n",{"version":3,"sources":["tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"tree.vue","sourceRoot":"src/pages/index/staff","sourcesContent":["<template>\n  <div class=\"expand\">\n    <div>\n        <el-button @click=\"handleAddTop\">添加顶级节点</el-button>\n        <el-tree ref=\"expandMenuList\" class=\"expand-tree\"\n        v-if=\"isLoadingTree\"\n        :data=\"setTree\"\n        node-key=\"id\"\n        highlight-current\n        :props=\"defaultProps\"\n        :expand-on-click-node=\"false\"\n        :render-content=\"renderContent\"\n        :default-expanded-keys=\"defaultExpandKeys\"\n        @node-click=\"handleNodeClick\"></el-tree>\n      </div>\n  </div>\n</template>\n<!-- VUE饿了么树形控件添加增删改功能按钮 -->\n<script>\nimport TreeRender from './tree_render'\nimport api from '@/resource/api'\n\n  export default{\n    name: 'tree',\n    data(){\n      return{\n        maxexpandId: api.maxexpandId,//新增节点开始id\n        non_maxexpandId: api.maxexpandId,//新增节点开始id(不更改)\n        isLoadingTree: false,//是否加载节点树\n        setTree: api.treelist,//节点树数据\n        defaultProps: {\n          children: 'children',\n          label: 'name'\n        },\n        defaultExpandKeys: [],//默认展开节点列表\n      }\n    },\n    mounted(){\n      console.log(api)\n      this.initExpand()\n    },\n    methods: {\n      initExpand(){\n        this.setTree.map((a) => {\n          this.defaultExpandKeys.push(a.id)\n        });\n        this.isLoadingTree = true;\n      },\n      handleNodeClick(d,n,s){//点击节点\n        // console.log(d,n)\n        d.isEdit = false;//放弃编辑状态\n      },\n      renderContent(h,{node,data,store}){//加载节点\n        let that = this;\n        return h(TreeRender,{\n          props: {\n            DATA: data,\n            NODE: node,\n            STORE: store,\n            maxexpandId: that.non_maxexpandId\n          },\n          on: {\n            nodeAdd: ((s,d,n) => that.handleAdd(s,d,n)),\n            nodeEdit: ((s,d,n) => that.handleEdit(s,d,n)),\n            nodeDel: ((s,d,n) => that.handleDelete(s,d,n))\n          }\n        });\n      },\n      handleAddTop(){\n        this.setTree.push({\n          id: ++this.maxexpandId,\n          name: '新增节点',\n          pid: '',\n          isEdit: false,\n          children: []\n        })\n      },\n      handleAdd(s,d,n){//增加节点\n        console.log(s,d,n)\n        if(n.level >=3){\n          this.$message.error(\"最多只支持五级！\")\n          return false;\n        }\n        //添加数据\n        d.children.push({\n          id: ++this.maxexpandId,\n          name: '新增节点',\n          pid: d.id,\n          isEdit: false,\n          children: []\n        });\n        //展开节点\n        if(!n.expanded){\n          n.expanded = true;\n        }\n      },\n      handleEdit(s,d,n){//编辑节点\n        console.log(s,d,n)\n      },\n      handleDelete(s,d,n){//删除节点\n        console.log(s,d,n)\n        let that = this;\n        //有子级不删除\n        if(d.children && d.children.length !== 0){\n          this.$message.error(\"此节点有子级，不可删除！\")\n          return false;\n        }else{\n          //新增节点直接删除，否则要询问是否删除\n          let delNode = () => {\n            let list = n.parent.data.children || n.parent.data,//节点同级数据\n              _index = 99999;//要删除的index\n            /*if(!n.parent.data.children){//删除顶级节点，无children\n              list = n.parent.data\n            }*/\n            list.map((c,i) => {\n              if(d.id == c.id){\n                _index = i;\n              }\n            })\n            let k = list.splice(_index,1);\n            //console.log(_index,k)\n            this.$message.success(\"删除成功！\")\n          }\n          let isDel = () => {\n            that.$confirm(\"是否删除此节点？\",\"提示\",{\n              confirmButtonText: \"确认\",\n              cancelButtonText: \"取消\",\n              type: \"warning\"\n            }).then(() => {\n              delNode()\n            }).catch(() => {\n              return false;\n            })\n          }\n          //判断是否新增\n          d.id > this.non_maxexpandId ? delNode() : isDel()\n          \n        }\n      },\n    }\n    \n  }\n</script>\n\n<style>\n.expand{\n  width:100%;\n  height:80%;\n  overflow:hidden;\n}\n.expand>div{\n  height:85%;\n  padding-top:20px;\n  width:50%;\n  margin:20px auto;\n  max-width:400px;\n  overflow-y:auto;\n}\n.expand>div::-webkit-scrollbar-track{\n  box-shadow: inset 0 0 6px rgba(0,0,0,.3);\n  border-radius:5px;\n}\n.expand>div::-webkit-scrollbar-thumb{\n  background-color:rgba(50, 65, 87, 0.5);\n  outline:1px solid slategrey;\n  border-radius:5px;\n}\n.expand>div::-webkit-scrollbar{\n  width:10px;\n}\n.expand-tree{\n  border:none;\n  margin-top:10px;\n}\n.expand-tree .el-tree-node.is-current,\n.expand-tree .el-tree-node:hover{\n  overflow:hidden;\n}\n.expand-tree .is-current>.el-tree-node__content .tree-btn,\n.expand-tree .el-tree-node__content:hover .tree-btn{\n  display:inline-block;\n}\n.expand-tree .is-current>.el-tree-node__content .tree-label{\n  font-weight:600;\n  white-space:normal;\n}\n</style>"]}]}